/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WeeklySalaryReportDlg.java
 *
 * Created on May 11, 2010, 4:07:50 AM
 */
package com.aptech.labourmanagement.gui;

import com.aptech.labourmanagement.component.ColumnData;
import com.aptech.labourmanagement.component.LookAndFeel;
import com.aptech.labourmanagement.component.ObjectTableModel;
import com.aptech.labourmanagement.dao.AttendanceDAO;
import com.aptech.labourmanagement.entity.HourTotal;
import com.aptech.labourmanagement.services.AttendanceServices;
import com.aptech.labourmanagement.services.WorkerServices;
import java.awt.Toolkit;
import java.sql.Date;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.ListSelectionModel;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingConstants;

/**
 *
 * @author Noi Nho
 */
public class WeeklySalaryReportDlg extends javax.swing.JDialog {

    private AttendanceServices atSer;
    public ArrayList<HourTotal> arrHoueTotal = new ArrayList<HourTotal>();
    private JTable headerTable;
    private ObjectTableModel tableModel;
    public Date dateFrom;
    public Date dateTo;

    /** Creates new form WeeklySalaryReportDlg */
    public WeeklySalaryReportDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setIconImage(new ImageIcon(getClass().getResource("../icon/LMSIcon.png")).getImage());
        // Cach lam cho form xuat hien giua man hinh
        this.setSize(770, 625);
        int width = this.getWidth();
        int heigh = this.getHeight();
        int screenHeight = (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight();
        int screenWidth = (int) Toolkit.getDefaultToolkit().getScreenSize().getWidth();
        this.setBounds((screenWidth - width) / 2, (screenHeight - heigh) / 2, width, heigh);
        new LookAndFeel(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        dcsFromDay = new com.toedter.calendar.JDateChooser();
        dcsToDay = new com.toedter.calendar.JDateChooser();
        lblFromDay = new javax.swing.JLabel();
        lblToDay = new javax.swing.JLabel();
        btnComputingSalary = new javax.swing.JButton();
        lblOption = new javax.swing.JLabel();
        cbbOption = new javax.swing.JComboBox();
        txtLaborID = new javax.swing.JTextField();
        lblLaborID = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        btnPrint = new javax.swing.JButton();
        scrSalary = new javax.swing.JScrollPane();
        tblSalary = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Weekly Salary Report");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0))); // NOI18N
        jPanel1.setLayout(new java.awt.GridBagLayout());

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 24));
        lblTitle.setText("Weekly Salary Report");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(lblTitle, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 20, 5);
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Computing option", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(0, 0, 0))); // NOI18N
        jPanel2.setLayout(new java.awt.GridBagLayout());

        dcsFromDay.setDateFormatString("MM/dd/yyyy");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 5, 5);
        jPanel2.add(dcsFromDay, gridBagConstraints);

        dcsToDay.setDateFormatString("MM/dd/yyyy");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 5, 5);
        jPanel2.add(dcsToDay, gridBagConstraints);

        lblFromDay.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFromDay.setText("From day:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanel2.add(lblFromDay, gridBagConstraints);

        lblToDay.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblToDay.setText("To day:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanel2.add(lblToDay, gridBagConstraints);

        btnComputingSalary.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/aptech/labourmanagement/icon/calculator.png"))); // NOI18N
        btnComputingSalary.setText("Computing salary");
        btnComputingSalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComputingSalaryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        jPanel2.add(btnComputingSalary, gridBagConstraints);

        lblOption.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblOption.setText("Option:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanel2.add(lblOption, gridBagConstraints);

        cbbOption.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All labor", "One lalor", "Highest salary", "Lowest salary" }));
        cbbOption.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbOptionItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 5, 5);
        jPanel2.add(cbbOption, gridBagConstraints);

        txtLaborID.setColumns(10);
        txtLaborID.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 5, 5);
        jPanel2.add(txtLaborID, gridBagConstraints);

        lblLaborID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblLaborID.setText("Labor ID:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanel2.add(lblLaborID, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jPanel2, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Salary report", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(0, 0, 0))); // NOI18N
        jPanel3.setLayout(new java.awt.BorderLayout(0, 5));

        btnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/aptech/labourmanagement/icon/printer2.png"))); // NOI18N
        btnPrint.setText("Print");
        btnPrint.setPreferredSize(new java.awt.Dimension(85, 25));
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });
        jPanel4.add(btnPrint);

        jPanel3.add(jPanel4, java.awt.BorderLayout.SOUTH);

        scrSalary.setPreferredSize(new java.awt.Dimension(730, 300));

        tblSalary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Firs name", "Last name", "Day of birth", "Total hour", "Salary grade", "Total salary"
            }
        ));
        scrSalary.setViewportView(tblSalary);

        jPanel3.add(scrSalary, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jPanel3, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbbOptionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbOptionItemStateChanged
        if (cbbOption.getSelectedIndex() == 0) {
            txtLaborID.setEditable(false);
        } else {
            if (cbbOption.getSelectedIndex() == 1) {
                txtLaborID.setEditable(true);
            } else {
                if (cbbOption.getSelectedIndex() == 2) {
                    txtLaborID.setEditable(false);
                    Calendar ca = Calendar.getInstance();
                    ca.setTime(dcsFromDay.getDate());
                    dateFrom = new Date(ca.getTimeInMillis());

                    ca.setTime(dcsToDay.getDate());
                    dateTo = new Date(ca.getTimeInMillis());
                    loadTableMaxSalary(dateFrom, dateTo);
                } else {
                    if (cbbOption.getSelectedIndex() == 3) {
                        txtLaborID.setEditable(false);
                        Calendar ca = Calendar.getInstance();
                        ca.setTime(dcsFromDay.getDate());
                        dateFrom = new Date(ca.getTimeInMillis());

                        ca.setTime(dcsToDay.getDate());
                        dateTo = new Date(ca.getTimeInMillis());
                        loadTableMinSalary(dateFrom, dateTo);
                    }
                }
            }
        }
    }//GEN-LAST:event_cbbOptionItemStateChanged

    private void btnComputingSalaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComputingSalaryActionPerformed
        if (dcsToDay.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Date can not empty or the date is not valid!", "Warning", JOptionPane.WARNING_MESSAGE);
            dcsToDay.requestFocus();
            dcsToDay.setDate(null);
            return;
        }
        if (dcsFromDay.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Date can not empty or the date is not valid!", "Warning", JOptionPane.WARNING_MESSAGE);
            dcsFromDay.requestFocus();
            dcsFromDay.setDate(null);
            return;
        }
        Calendar ca = Calendar.getInstance();
        ca.setTime(dcsFromDay.getDate());
        dateFrom = new Date(ca.getTimeInMillis());

        ca.setTime(dcsToDay.getDate());
        dateTo = new Date(ca.getTimeInMillis());

        if (cbbOption.getSelectedIndex() == 0) {
            loadDataOnTableSalaryReport(dateFrom, dateTo);
            //dcsFromDay.setDate(null);
            //dcsToDay.setDate(null);
        }
        if (cbbOption.getSelectedIndex() == 1) {
            int workerID = Integer.parseInt(txtLaborID.getText().trim());
            loadTableWorkerSalary(dateFrom, dateTo, workerID);
        }
        if (cbbOption.getSelectedIndex() == 2) {
            loadTableMaxSalary(dateFrom, dateTo);
        }
        if (cbbOption.getSelectedIndex() == 3) {
            loadTableMinSalary(dateFrom, dateTo);
        }
    }//GEN-LAST:event_btnComputingSalaryActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        if (arrHoueTotal.size() > 0) {
            new SalaryReportFrm(this).setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Data is empty!", "Warning", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnPrintActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                WeeklySalaryReportDlg dialog = new WeeklySalaryReportDlg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnComputingSalary;
    private javax.swing.JButton btnPrint;
    private javax.swing.JComboBox cbbOption;
    private com.toedter.calendar.JDateChooser dcsFromDay;
    private com.toedter.calendar.JDateChooser dcsToDay;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lblFromDay;
    private javax.swing.JLabel lblLaborID;
    private javax.swing.JLabel lblOption;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblToDay;
    private javax.swing.JScrollPane scrSalary;
    private javax.swing.JTable tblSalary;
    private javax.swing.JTextField txtLaborID;
    // End of variables declaration//GEN-END:variables

    private void loadDataOnTableSalaryReport(Date dateFrom, Date dateTo) {
        atSer = new AttendanceServices();
        arrHoueTotal = atSer.computingHourTotal(dateFrom, dateTo);
        ColumnData[] columns = {
            new ColumnData("Last name", 80, SwingConstants.LEFT, 2),
            new ColumnData("First name", 50, SwingConstants.LEFT, 1),
            new ColumnData("Day of birth", 90, SwingConstants.LEFT, 3),
            new ColumnData("Salary grade", 50, SwingConstants.LEFT, 4),
            new ColumnData("Total hours", 80, SwingConstants.LEFT, 5),
            new ColumnData("Totals salary", 80, SwingConstants.LEFT, 6)
        };
        tableModel = new ObjectTableModel(tblSalary, columns, arrHoueTotal);
        headerTable = tableModel.getHeaderTable();

        //tao cot stt tu dong
        headerTable.createDefaultColumnsFromModel();

        tblSalary.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        // Put it in a viewport that we can control a bit
        JViewport viewport = new JViewport();

        //hien thi du lieu cot stt
        viewport.setView(headerTable);

        viewport.setPreferredSize(headerTable.getMaximumSize());

        scrSalary.setRowHeader(viewport);
        scrSalary.setCorner(ScrollPaneConstants.UPPER_LEFT_CORNER, headerTable.getTableHeader());
    }

    private void loadTableMaxSalary(Date dateFrom, Date dateTo) {
        ArrayList<HourTotal> arrMaxSalary = new ArrayList<HourTotal>();
        if (arrHoueTotal.isEmpty()) {
            atSer = new AttendanceServices();
            arrHoueTotal = atSer.computingHourTotal(dateFrom, dateTo);
        }
        float maxSalary = 0;
        HourTotal hourTotal = new HourTotal();
        for (int i = 0; i < arrHoueTotal.size(); i++) {
            float temp = arrHoueTotal.get(i).getWorker().getSalaryGrade().getGradeNum() * arrHoueTotal.get(i).getHourTotal();
            if (temp > maxSalary) {
                maxSalary = temp;
                hourTotal = arrHoueTotal.get(i);
            }
        }
        arrMaxSalary.add(hourTotal);
        ColumnData[] columns = {
            new ColumnData("First name", 50, SwingConstants.LEFT, 1),
            new ColumnData("Last name", 80, SwingConstants.LEFT, 2),
            new ColumnData("Day of birth", 90, SwingConstants.LEFT, 3),
            new ColumnData("Salary grade", 50, SwingConstants.LEFT, 4),
            new ColumnData("Total hours", 80, SwingConstants.LEFT, 5),
            new ColumnData("Totals salary", 80, SwingConstants.LEFT, 6)
        };
        tableModel = new ObjectTableModel(tblSalary, columns, arrMaxSalary);
        headerTable = tableModel.getHeaderTable();

        //tao cot stt tu dong
        headerTable.createDefaultColumnsFromModel();

        tblSalary.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        // Put it in a viewport that we can control a bit
        JViewport viewport = new JViewport();

        //hien thi du lieu cot stt
        viewport.setView(headerTable);

        viewport.setPreferredSize(headerTable.getMaximumSize());

        scrSalary.setRowHeader(viewport);
        scrSalary.setCorner(ScrollPaneConstants.UPPER_LEFT_CORNER, headerTable.getTableHeader());
    }

    private void loadTableMinSalary(Date dateFrom, Date dateTo) {
        ArrayList<HourTotal> arrMinSalary = new ArrayList<HourTotal>();
        if (arrHoueTotal.isEmpty()) {
            atSer = new AttendanceServices();
            arrHoueTotal = atSer.computingHourTotal(dateFrom, dateTo);
        }
        float minSalary = Float.MAX_VALUE;
        HourTotal hourTotal = new HourTotal();
        for (int i = 0; i < arrHoueTotal.size(); i++) {
            float temp = arrHoueTotal.get(i).getWorker().getSalaryGrade().getGradeNum() * arrHoueTotal.get(i).getHourTotal();
            if (temp < minSalary) {
                minSalary = temp;
                hourTotal = arrHoueTotal.get(i);
            }
        }
        arrMinSalary.add(hourTotal);
        ColumnData[] columns = {
            new ColumnData("First name", 50, SwingConstants.LEFT, 1),
            new ColumnData("Last name", 80, SwingConstants.LEFT, 2),
            new ColumnData("Day of birth", 90, SwingConstants.LEFT, 3),
            new ColumnData("Salary grade", 50, SwingConstants.LEFT, 4),
            new ColumnData("Total hours", 80, SwingConstants.LEFT, 5),
            new ColumnData("Totals salary", 80, SwingConstants.LEFT, 6)
        };
        tableModel = new ObjectTableModel(tblSalary, columns, arrMinSalary);
        headerTable = tableModel.getHeaderTable();

        //tao cot stt tu dong
        headerTable.createDefaultColumnsFromModel();

        tblSalary.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        // Put it in a viewport that we can control a bit
        JViewport viewport = new JViewport();

        //hien thi du lieu cot stt
        viewport.setView(headerTable);

        viewport.setPreferredSize(headerTable.getMaximumSize());

        scrSalary.setRowHeader(viewport);
        scrSalary.setCorner(ScrollPaneConstants.UPPER_LEFT_CORNER, headerTable.getTableHeader());
    }

    private void loadTableWorkerSalary(Date dateFrom, Date dateTo, int workerID) {
        ArrayList<HourTotal> arrWorkerSalary = new ArrayList<HourTotal>();
        HourTotal hourTotal = new HourTotal();
        int totalHour;
        if (arrHoueTotal.isEmpty()) {
            AttendanceDAO atDAO = new AttendanceDAO();
            totalHour = atDAO.readTotalHourByWorkerID(workerID, dateFrom, dateTo);
            if (totalHour > 0) {
                hourTotal.setHourTotal(totalHour);
                WorkerServices ws = new WorkerServices();
                hourTotal.setWorker(ws.readByID(workerID));
                arrWorkerSalary.add(hourTotal);
            }
        } else {
            for (int i = 0; i < arrHoueTotal.size(); i++) {
                if (arrHoueTotal.get(i).getWorker().getWorkerID() == workerID) {
                    hourTotal = arrHoueTotal.get(i);
                    arrWorkerSalary.add(hourTotal);
                }
            }
        }

        ColumnData[] columns = {
            new ColumnData("First name", 50, SwingConstants.LEFT, 1),
            new ColumnData("Last name", 80, SwingConstants.LEFT, 2),
            new ColumnData("Day of birth", 90, SwingConstants.LEFT, 3),
            new ColumnData("Salary grade", 50, SwingConstants.LEFT, 4),
            new ColumnData("Total hours", 80, SwingConstants.LEFT, 5),
            new ColumnData("Totals salary", 80, SwingConstants.LEFT, 6)
        };
        tableModel = new ObjectTableModel(tblSalary, columns, arrWorkerSalary);
        headerTable = tableModel.getHeaderTable();

        //tao cot stt tu dong
        headerTable.createDefaultColumnsFromModel();

        tblSalary.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        // Put it in a viewport that we can control a bit
        JViewport viewport = new JViewport();

        //hien thi du lieu cot stt
        viewport.setView(headerTable);

        viewport.setPreferredSize(headerTable.getMaximumSize());

        scrSalary.setRowHeader(viewport);
        scrSalary.setCorner(ScrollPaneConstants.UPPER_LEFT_CORNER, headerTable.getTableHeader());
    }
}
